#!/bin/bash

# sysinfo_page - A script to produce a system information HTML file

##### Constants

TITLE="System Information for $HOSTNAME"
RIGHT_NOW=$(date +"%x %r %Z")
TIME_STAMP="Updated on $RIGHT_NOW by $USER"

##### Functions

system_info()
{
  # Find any release files in /etc
  if ls /etc/*release 1>/dev/null 2>&1; then
    echo "<h2>System Release Information"
    echo "<pre>"
    for i in /etc/*release; do

      # We dont know file length,
      # just display first line
      head -n 1 $i
    done
    uname -orp
    echo "</pre>"
  fi
  echo "system_info"
} # End of system info

show_uptime()
{
  # Temporary function stub
  echo "<h2>System uptime</h2>"
  echo "<pre>"
  uptime
  echo "</pre>"
}

drive_space()
{
  echo "<h2>Filesystem space</h2>"
  echo "<pre>"
  df
  echo "</pre>"
}

home_space()
{
  # User must not be guest
  echo "<h2>Home Directory Space</h2>"
  echo "<pre>"
  format="%8s%10s%10s   %-s\n"
  printf "$format" "Dirs" "Files" "Blocks" "Directory"
  printf "$format" "----" "-----" "------" "---------"
  if [ id -u = "0" ]; then
    dir_list="/home/*"
  else
    dir_list="$HOME"
  fi
  for home_dir in $dir_list; do
    total_dirs=$(find $home_dir -type d | wc -l)
    total_files=$(find $home_dir -type f | wc -l)
    total_blocks=$(du -s $home_dir)
    printf "$format " $total_dirs $total_files $total_blocks
  done
  echo "</pre>"
} # end of home space

# Write page function
write_page()
{
cat <<- _EOF_
<html>
<head>
<title>$TITLE</title>
<link href="~/Downloads/macbook.png" />
</head>

<body>
<h1>$TITLE</h1>
  <p>$TIME_STAMP</p>
  $(system_info)
  $(show_uptime)
  $(drive_space)
  $(home_space)
</body>
</html>
_EOF_

}

usage()
{
  echo "Usage: sysinfo_page [[[-f file ] [-i]] | [-h]]"
}

##### Main
interactive=
filename=~/SystemDashboard.html

while [ "$1" != "" ]; do
  case $1 in
    -f | --filename )       shift
                            filename=$1
                            ;;
    -i | --interactive )    interactive=1
                            ;;
    -h | --help )           usage;
                            exit
                            ;;
    * )                     usage;
                            exit
  esac
  shift
done

# Test code to verify command line processing is a go
if [ "$interactive" = "1" ]; then
  echo error_exit "$LINENO: Main did not run."
  response=
  echo -n "Enter name of output file [$filename] > "
  read response
  if [ -n "$response" ]; then
    filename=$response
  fi

  if [ -f $filename ]; then
    echo -n "Output file already exists. Overwrite? (y/n) > "
    read response
    if [ "$response" != "y" ]; then
      echo "Do not overwrite, exiting now."
      exit
    fi
  fi
fi
echo "Output file went to: $filename"

# Write page will be commented out until the testing is complete
# Write page > $filename
